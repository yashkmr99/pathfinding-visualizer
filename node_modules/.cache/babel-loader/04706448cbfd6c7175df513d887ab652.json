{"ast":null,"code":"var _jsxFileName = \"/home/yash/projects/self/pathfinding-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from './Node/Node';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  } // animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder){\n  //     for(let i = 0; i <= visitedNodesInOrder.length; i++){\n  //         if (i == visitedNodesInOrder.length) {\n  //             setTimeout(() => {\n  //                 this.animateShortestPath(nodesInShortestPathOrder);\n  //             }, 10*i);\n  //             return;\n  //         }\n  //         setTimeout(() => {\n  //             const node = visitedNodesInOrder[i];\n  //             document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n  //         }, 10*i);\n  //     }\n  // }\n  // animateShortestPath(nodesInShortestPathOrder){\n  //     for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n  //         setTimeout(() => {\n  //             const node = nodesInShortestPathOrder[i];\n  //             document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n  //         }, 50*i);\n  //     }\n  // }\n  // visualizeDijkstra() {\n  //     const {grid} = this.state;\n  //     const startNode = grid[START_NODE_ROW][START_NODE_COL];\n  //     const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n  //     const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n  //     const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n  //     this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  // }\n\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          row: row,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }\n        });\n      }));\n    }));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/yash/projects/self/pathfinding-visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","render","map","rowIdx","node","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './PathfindingVisualizer.css';\nimport Node from './Node/Node';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount(){\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col){\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col){\n        if(!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp(){\n        this.setState({mouseIsPressed: false});\n    }\n\n    // animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder){\n\n    //     for(let i = 0; i <= visitedNodesInOrder.length; i++){\n    //         if (i == visitedNodesInOrder.length) {\n    //             setTimeout(() => {\n    //                 this.animateShortestPath(nodesInShortestPathOrder);\n    //             }, 10*i);\n    //             return;\n    //         }\n    //         setTimeout(() => {\n    //             const node = visitedNodesInOrder[i];\n    //             document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n    //         }, 10*i);\n    //     }\n    // }\n\n    // animateShortestPath(nodesInShortestPathOrder){\n    //     for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n    //         setTimeout(() => {\n    //             const node = nodesInShortestPathOrder[i];\n    //             document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n    //         }, 50*i);\n    //     }\n    // }\n\n    // visualizeDijkstra() {\n    //     const {grid} = this.state;\n    //     const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    //     const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    //     const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    //     const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    //     this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    // }\n\n    render(){\n        const {grid, mouseIsPressed} = this.state;\n        return (\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                    return (\n                        <div key = {rowIdx}>\n                            {row.map((node, nodeIdx) => {\n\n                                const {row, col, isFinish, isStart, isWall} = node;\n                                return (\n                                    <Node\n                                        key = {nodeIdx}\n                                        row = {row}\n                                        col = {col}\n                                        isFinish = {isFinish}\n                                        isStart = {isStart}\n                                        isWall = {isWall}\n                                        mouseIsPressed = {mouseIsPressed}\n                                        onMouseDown = {(row, col) => this.handleMouseDown(row, col)}\n                                        onMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\n                                        onMouseUp = {() => this.handleMouseUp()}\n                                    ></Node>\n                                );\n                            })}\n                        </div>\n                    );\n\n                })}\n            </div>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for(let row = 0; row < 20; row++) {\n        const currentRow = [];\n        for(let col = 0; col < 50; col++){\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};"]},"metadata":{},"sourceType":"module"}